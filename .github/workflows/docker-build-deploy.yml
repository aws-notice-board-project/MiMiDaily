name: build-deploy

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout
        uses: actions/checkout@v2

      # 2. AWS 자격 증명 세팅
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. ECR 로그인
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. Nginx 이미지 빌드 & 푸시
      - name: Build & Push nginx Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t ${{ steps.login-ecr.outputs.registry }}/ecr_nginx:$IMAGE_TAG -f ./Dockerfile.nginx .
          docker push ${{ steps.login-ecr.outputs.registry }}/ecr_nginx:$IMAGE_TAG
          echo "NGINX_IMAGE=${{ steps.login-ecr.outputs.registry }}/ecr_nginx:$IMAGE_TAG" >> $GITHUB_ENV

      # 5. Tomcat 이미지 빌드 & 푸시
      - name: Build & Push tomcat Docker image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build -t ${{ steps.login-ecr.outputs.registry }}/ecr_tomcat:$IMAGE_TAG -f ./Dockerfile.tomcat .
          docker push ${{ steps.login-ecr.outputs.registry }}/ecr_tomcat:$IMAGE_TAG
          echo "TOMCAT_IMAGE=${{ steps.login-ecr.outputs.registry }}/ecr_tomcat:$IMAGE_TAG" >> $GITHUB_ENV

      # 6. 배포 번들 생성 (appspec.yml + 스크립트 + 이미지 태그 기록)
      - name: Create deployment bundle
        run: |
          mkdir -p deploy
          cp appspec.yml deploy/
          cp -r scripts deploy/
          echo $NGINX_IMAGE > deploy/nginx_image.txt
          echo $TOMCAT_IMAGE > deploy/tomcat_image.txt
          zip -r deploy.zip deploy

      # 7. 배포 번들을 S3에 업로드
      - name: Upload bundle to S3
        run: |
          aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_BUCKET }}/deploy.zip

      # 8. CodeDeploy 실행
      - name: Deploy to EC2 with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.CODEDEPLOY_APP_NAME }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_GROUP_NAME }} \  
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=deploy.zip,bundleType=zip
