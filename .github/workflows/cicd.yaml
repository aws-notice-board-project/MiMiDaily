name: CI/CD (ECR + ArgoCD)

on:
  push:
    branches: [ "jaeyeol-container" ]
    paths:
      - "Dockerfile.nginx"
      - "Dockerfile.tomcat"
      - "nginx.conf"
      - "mimidaily/**"
      - "k8s/**"
      - ".github/workflows/cicd.yaml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write    # kustomization.yaml 커밋
      id-token: write    # (OIDC 쓰는 경우 필요)

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_NGINX: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NGINX }}
      ECR_TOMCAT: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_TOMCAT }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- AWS 자격증명 구성 ---
      # (B) 액세스 키 방식
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # (A) OIDC 사용할 때 예시:
      # - name: Configure AWS credentials (OIDC)
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::857305036087:role/GitHubActionsECRPushRole
      #     aws-region:     ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      # --- Build & Push NGINX ---
      - name: Build & Push NGINX (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f Dockerfile.nginx \
            -t ${ECR_NGINX}:${IMAGE_TAG::7} \
            -t ${ECR_NGINX}:latest \
            --push .

      # --- Build & Push TOMCAT ---
      - name: Build & Push TOMCAT (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f Dockerfile.tomcat \
            -t ${ECR_TOMCAT}:${IMAGE_TAG::7} \
            -t ${ECR_TOMCAT}:latest \
            --push .

      # --- kustomization.yaml의 이미지 태그 bump ---
      - name: Install yq
        uses: mikefarah/yq@v4.44.3

      - name: Update kustomize image tags
        run: |
          yq -i '
            .images |=
              map(
                if .name == env(ECR_NGINX) then . + {newTag: env(IMAGE_TAG)[:7]}
                else if .name == env(ECR_TOMCAT) then . + {newTag: env(IMAGE_TAG)[:7]}
                else . end end
              )
          ' k8s/kustomization.yaml
          echo "==== kustomization.yaml ===="
          cat k8s/kustomization.yaml

      - name: Commit & Push manifest bump
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add k8s/kustomization.yaml
          git commit -m "ci: bump images to nginx=${IMAGE_TAG::7}, tomcat=${IMAGE_TAG::7}" || echo "No changes to commit"
          git push origin HEAD:main